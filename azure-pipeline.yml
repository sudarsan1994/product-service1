trigger:
  branches:
    include:
      - main

parameters:
  - name: environment
    displayName: 'Select environment to deploy'
    type: string
    default: 'dev'
    values:
      - dev
      - qa
      - prod

pool:
  vmImage: 'ubuntu-latest'      

variables:
  dockerRegistryServiceConnection: 'acrproductservice' # ACR service connection
  imageRepository: 'product-service'
  containerRegistry: 'prod-aks.azurecr.io'
  dockerImage: '$(containerRegistry)/$(imageRepository):$(Build.BuildId)'
  azureSubscriptionEndpoint: 'azureConnection'         # AzureRM connection
  kubernetesServiceConnection: 'aksConnection'         # Kubernetes-type connection
  k8sNamespace: 'default'
  manifestsPath: 'manifests/'


stages:
  - stage: Build
    displayName: 'Build and Push Docker Image'
    jobs:
      - job: Build
        displayName: 'Build & Push'
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - task: Maven@4
            inputs:
              mavenPomFile: 'pom.xml'
              goals: 'package'
              publishJUnitResults: true
              testResultsFiles: '**/surefire-reports/TEST-*.xml'
              javaHomeOption: 'JDKVersion'
              jdkVersionOption: '1.17'              # âœ… Required with JDKVersion
              mavenVersionOption: 'Default'
              mavenAuthenticateFeed: false
              effectivePomSkip: false
              sonarQubeRunAnalysis: false
          - task: PublishTestResults@2
            displayName: 'Publish JUnit Test Results'
            condition: succeededOrFailed()
            inputs:
              testResultsFormat: 'JUnit'
              testResultsFiles: '**/surefire-reports/TEST-*.xml'
              searchFolder: '$(System.DefaultWorkingDirectory)'
              mergeTestResults: true
              failTaskOnFailedTests: false
          - task: Docker@2
            inputs:
              containerRegistry: '$(dockerRegistryServiceConnection)'
              repository: '$(imageRepository)'
              command: 'buildAndPush'
              Dockerfile: '**/Dockerfile'
              tags: |
                $(Build.BuildId)

  - stage: Deploy
    displayName: 'Deploy to AKS'
    dependsOn: Build
    jobs:
    - deployment: DeployToAKS
      displayName: 'Deploy to ${{ parameters.environment }}'
      environment: ${{ parameters.environment }}  # <-- This triggers approval if environment is 'prod'
      strategy:
       runOnce:
        deploy:
          steps:
          - script: |
              if [ '${{ parameters.environment }}' = 'dev' ]; then
                echo "##vso[task.setvariable variable=RESOURCE_GROUP]rg-dev"
                echo "##vso[task.setvariable variable=AKS_CLUSTER]aks-dev"
              elif [ '${{ parameters.environment }}' = 'qa' ]; then
                echo "##vso[task.setvariable variable=RESOURCE_GROUP]rg-qa"
                echo "##vso[task.setvariable variable=AKS_CLUSTER]aks-qa"
              else
                echo "##vso[task.setvariable variable=RESOURCE_GROUP]prod-rg"
                echo "##vso[task.setvariable variable=AKS_CLUSTER]prod-aks"
              fi
            displayName: 'Set AKS and RG variables'

          - task: Kubernetes@1
            displayName: 'Configure kubectl'
            inputs:
             connectionType: 'Azure Resource Manager'
             azureSubscriptionEndpoint: '$(azureSubscriptionEndpoint)'
             azureResourceGroup: 'prod-rg'       # ðŸ‘ˆ update this
             kubernetesCluster: 'prod-aks'           # ðŸ‘ˆ update this
             command: 'login'
             useClusterAdmin: true

          - task: KubernetesManifest@1
            displayName: 'Deploy manifests to AKS'
            inputs:
             action: 'deploy'
             connectionType: 'kubernetesServiceConnection'
             kubernetesServiceConnection: 'aksConnection'
             namespace: '$(k8sNamespace)'
             manifests: '$(manifestsPath)/*.yaml'
             containers: '$(dockerImage)'
